Over the last week, I have successfully implemented translation in the chat application. In order to implement it, I had
to use the google_trans_new module in order to prevent the HTTP error that I got from previous modules that I used.
The implementation currently translates the whole message being sent by the user at the server, and then sends the message
to the other clients in the chat room. It translates from English to either Korean, Latin, German, or Japanese, with the 
destination language chosens at random for each message. A seperate function then stores the message in a database.

One of the challenges that I had to overcome was the HTTP error that I had talked about in class and in earlier reflections.
As it turned out, the modules that I used had been deprecated and didn't work,  and I just didn't notice because I immediatley
looked for the documentation instead of reading all of the pages, which was a pretty embarassing mistake for me to make. After that,
I had to find out the specific labels for the languages that I wanted to tranlate messages into (for example, german is "de"),
which was a bit more difficult than I realised, since there dosn't seem to be a list of them in any of the documentation that I read.
I eventually found a small list, and settled on some languages that I am somewhat familiar with, such as latin (I don't know how to actually
speak latin but I've heard some phrases) After that I decided to add languages that didn't use latin characters, like Japanese and Korean,
 to make the various possible translations more visually distinct from each other; to someone who only speaks English, German and Freanch
 phrases can look somewhat similar, but German and Korean phrases are immediatley recognizable as different.

Going forward, I hope to expand the databse of text messages to include the original english message as well as the translated message.
I will need to also exapnd the databse that I am using to include and ID number for each message so that calling the message from the
database will be easier when I try to reload previous chat messages in the client user interface. That will be useful because with this 
expanded database I will hopefully be able to make previous chat messages appear to newly connecting clients, so that when a client connects
they will immediatley see all (or some) of the previous messages sent in the chat server from before they joined. The main hurdle with
this is database design; I don't know a lot about how to build or interact with databases, but I do know that I will want to build off of
the database that I am making. I'm in a weird situation where I don't know what specifically I need to know in order to go forward, such
as good database design strategies and how the program will interact.

I will continue to use Python and the SQLite3 module. Most of what I need to do just involves using the resources that I currently have
in order to make the program more fleshed out.
